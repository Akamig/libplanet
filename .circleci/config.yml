version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  concat_files:
    description: Concatenate file contents
    parameters:
      glob: { type: string }
      to: { type: string }
    steps:
    - run:
        name: Concatenate file contents
        command: "cat -s <<parameters.glob>> > <<parameters.to>>"
        shell: bash

jobs:
  linux-build:
    docker:
    - image: mcr.microsoft.com/dotnet/sdk:3.1
    resource_class: xlarge
    steps:
    - checkout
    - concat_files:
        glob: "*/*.csproj"
        to: combined-package-files.txt
    - restore_cache:
        keys:
        - v1-deps-{{ arch }}-{{ checksum "combined-package-files.txt" }}
        - v1-deps-{{ arch }}
        - v1-deps
    - run: dotnet restore
    - save_cache:
        key: v1-deps-{{ arch }}-{{ checksum "combined-package-files.txt" }}
        paths:
        - ~/.nuget/packages
    - run: dotnet build --no-restore -c Release -p:SkipSonar=true
    - run:
        description: Collect tests
        shell: bash
        command: |
          set -evx
          dotnet test --no-restore --no-build -c Release --list-tests \
          > .dotnet-list-tests.txt
          grep -E '^    ' .dotnet-list-tests.txt \
          | sed -E 's/^    |\(.*?\)$//g' \
          | uniq \
          | /usr/bin/sort -R --random-source=CHANGES.md \
          > .tests.txt
    - persist_to_workspace:
        root: .
        paths:
        - .tests.txt
        - "*/bin/"
        - "*/obj/"

  linux-test:
    docker:
    - image: mcr.microsoft.com/dotnet/sdk:3.1
    resource_class: large
    parallelism: 4
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        description: Distribute tests
        shell: bash
        command: |
          total="$(wc -l .tests.txt | awk '{ print $1 }')"
          part="$(( (total + CIRCLE_NODE_TOTAL - 1) / CIRCLE_NODE_TOTAL ))"
          tail -n +$((CIRCLE_NODE_INDEX * part + 1)) .tests.txt \
          | head -n $part \
          > .current_tests.txt
          first=1
          while read test; do
            if [[ "$first" = "1" ]]; then
              echo "FullyQualifiedName=$test"
              first=0
            else
              echo "| FullyQualifiedName=$test"
            fi
          done < .current_tests.txt > .test-filter.txt
    - run: >-
        dotnet test
        --no-restore
        --no-build
        -c Release
        -l "junit;FailureBodyFormat=Verbose;LogFilePath=/tmp/junit/{assembly}.xml"
        --filter "$(cat .test-filter.txt)"
    - store_test_results:
        path: /tmp/junit

  windows-build:
    executor:
      name: win/default
      size: xlarge
    steps:
    - checkout
    - concat_files:
        glob: "*/*.csproj"
        to: combined-package-files.txt
    - restore_cache:
        keys:
        - v1-deps-{{ arch }}-{{ checksum "combined-package-files.txt" }}
        - v1-deps-{{ arch }}
        - v1-deps
    - run: dotnet restore
    - save_cache:
        key: v1-deps-{{ arch }}-{{ checksum "combined-package-files.txt" }}
        paths:
        - ~/.nuget/packages
    - run: dotnet build --no-restore -c Release -p:SkipSonar=true
    - run:
        description: Collect tests
        shell: bash
        command: |
          set -evx
          dotnet test --no-restore --no-build -c Release --list-tests \
          > .dotnet-list-tests.txt
          grep -E '^    ' .dotnet-list-tests.txt \
          | sed -E 's/^    |\(.*?\)$//g' \
          | uniq \
          | /usr/bin/sort -R --random-source=CHANGES.md \
          > .tests.txt
    - persist_to_workspace:
        root: .
        paths:
        - .tests.txt
        - "*/bin/"
        - "*/obj/"

  windows-test:
    executor:
      name: win/default
      size: large
    parallelism: 4
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        description: Distribute tests
        shell: bash
        command: |
          total="$(wc -l .tests.txt | awk '{ print $1 }')"
          part="$(( (total + CIRCLE_NODE_TOTAL - 1) / CIRCLE_NODE_TOTAL ))"
          tail -n +$((CIRCLE_NODE_INDEX * part + 1)) .tests.txt \
          | head -n $part \
          > .current_tests.txt
          first=1
          while read test; do
            if [[ "$first" = "1" ]]; then
              echo "FullyQualifiedName=$test"
              first=0
            else
              echo "| FullyQualifiedName=$test"
            fi
          done < .current_tests.txt > .test-filter.txt
    - run: >-
        dotnet test
        --no-restore
        --no-build
        -c Release
        -l "junit;FailureBodyFormat=Verbose;LogFilePath=/tmp/junit/{assembly}.xml"
        --filter "$(cat .test-filter.txt)"
    - store_test_results:
        path: /tmp/junit

workflows:
  main:
    jobs:
    - linux-build
    - linux-test:
        requires: [linux-build]
    - windows-build
    - windows-test:
        requires: [windows-build]
