version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  concat_files:
    description: Concatenate file contents
    parameters:
      glob: { type: string }
      to: { type: string }
    steps:
    - run:
        name: Concatenate file contents
        command: "cat -s <<parameters.glob>> > <<parameters.to>>"
        shell: bash

  brew_cask_install:
    description: "brew install --cask <<parameters.package>>"
    parameters:
      package: { type: string }
      tap: { type: string, default: "" }
    steps:
    - restore_cache:
        keys:
        - "v1-brew-cask-<<parameters.tap>>/<<parameters.package>>"
    - run: |
        if brew list --cask | grep <<parameters.package>>; then
          if [[ "<<parameters.tap>>" != "" ]]; then
            brew tap "<<parameters.tap>>"
          fi
          brew reinstall --cask <<parameters.package>>
        else
          if [[ "<<parameters.tap>>" != "" ]]; then
            brew tap "<<parameters.tap>>"
          fi
          brew install --cask <<parameters.package>>
        fi
    - save_cache:
        key: "v1-brew-cask-<<parameters.tap>>/<<parameters.package>>"
        paths:
        - "/usr/local/Caskroom/<<parameters.package>>/"

  netcore_build_base:
    parameters:
      collect_tests_to:
        type: string
        default: .tests.txt
    steps:
    - checkout
    - concat_files:
        glob: "*/*.csproj"
        to: .combined-package-files.txt
    - restore_cache:
        keys:
        - v1-deps-{{ arch }}-{{ checksum ".combined-package-files.txt" }}
        - v1-deps-{{ arch }}
    - run: dotnet restore
    - save_cache:
        key: v1-deps-{{ arch }}-{{ checksum ".combined-package-files.txt" }}
        paths:
        - ~/.nuget/packages
    - run: dotnet build --no-restore -c Release -p:SkipSonar=true
    - run:
        description: Collect tests
        shell: bash
        command: |
          set -evx
          if ! command -v dotnet > /dev/null && \
             [[ -d /usr/local/share/dotnet ]]; then
            export PATH="/usr/local/share/dotnet:$PATH"
          fi
          dotnet test --no-restore --no-build -c Release --list-tests \
          > .dotnet-list-tests.txt
          grep -E '^    ' .dotnet-list-tests.txt \
          | sed -E 's/^    |\(.*?\)$//g' \
          | uniq \
          | /usr/bin/sort -R --random-source=CHANGES.md \
          > "<<parameters.collect_tests_to>>"
    - persist_to_workspace:
        root: .
        paths:
        - <<parameters.collect_tests_to>>
        - "*/bin/"
        - "*/obj/"

  mono_build_base:
    steps:
    - checkout
    - concat_files:
        glob: "*/*.csproj"
        to: .combined-package-files.txt
    - restore_cache:
        keys:
        - v1-deps-{{ arch }}-{{ checksum ".combined-package-files.txt" }}
        - v1-deps-{{ arch }}
    - run: |
        msbuild \
          -t:Restore \
          -p:Configuration=Release \
          -p:TestsTargetFramework=net47
    - save_cache:
        key: v1-deps-{{ arch }}-{{ checksum ".combined-package-files.txt" }}
        paths:
        - ~/.nuget/packages
    - run: |
        msbuild \
          -p:Configuration=Release \
          -p:TestsTargetFramework=net47 \
          -p:SkipSonar=true
    - persist_to_workspace:
        root: .
        paths:
        - "*/bin/"
        - "*/obj/"

  netcore_test_base:
    parameters:
      collect_tests_from:
        type: string
        default: .tests.txt
    steps:
    - restore_cache:
        keys:
        - v1-dotcover-{{ arch }}
    - run: >-
        dotnet tool install
        --global
        JetBrains.dotCover.GlobalTool
        --version 2021.2.2
    - save_cache:
        key: v1-dotcover-{{ arch }}
        paths:
        - ~/.nuget/packages
    - checkout
    - attach_workspace:
        at: .
    - run:
        description: Distribute tests
        shell: bash
        command: |
          set -evx
          if ! command -v dotnet > /dev/null && \
             [[ -d /usr/local/share/dotnet ]]; then
            export PATH="/usr/local/share/dotnet:$PATH"
          fi
          tests_collection="<<parameters.collect_tests_from>>"
          total="$(wc -l "$tests_collection" | awk '{ print $1 }')"
          part="$(( (total + CIRCLE_NODE_TOTAL - 1) / CIRCLE_NODE_TOTAL ))"
          tail -n +$((CIRCLE_NODE_INDEX * part + 1)) "$tests_collection" \
          > .head_tests.txt
          if [[ "$part" = "0" ]]; then
            cp .head_tests.txt .current_tests.txt
          else
            head -n $part .head_tests.txt > .current_tests.txt
          fi
          cat .current_tests.txt
          first=1
          while read test; do
            if [[ "$first" = "1" ]]; then
              echo "FullyQualifiedName=$test"
              first=0
            else
              echo "| FullyQualifiedName=$test"
            fi
          done < .current_tests.txt > .test-filter.txt
    - run:
        command: >-
          ~/.dotnet/tools/dotnet-dotcover test
          --no-restore
          --no-build
          -c Release
          -l "junit;FailureBodyFormat=Verbose;LogFilePath=/tmp/junit/{assembly}.xml"
          --filter "$(cat .test-filter.txt)"
          --dcDisableDefaultFilters
          --dcReportType=DetailedXML
          --dcFilters="+:Libplanet;+:Libplanet.*;-:Libplanet.Tests;-:Libplanet.*.Tests;-:Libplanet.*.UnitTests;-:Libplanet.Benchmarks;-:Libplanet.Explorer"
        no_output_timeout: 65s
    - store_test_results:
        path: /tmp/junit
    - run:
        shell: bash
        command: |
          curl -s https://codecov.io/bash | bash -s -- \
            -f dotCover.Output.xml \
            -t "$CODECOV_TOKEN" \
            -n "$CIRCLE_BUILD_NUM" \
            -Z
        when: always

  unity_test_base:
    parameters:
      runner_target:
        type: string
        default: StandaloneLinux64
      runner_version:
        type: string
        default: 0.5.0
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        shell: bash
        command: |
          set -evx
          url="https://github.com/planetarium/xunit-unity-runner/releases/download/<<parameters.runner_version>>/xunit-unity-runner-<<parameters.runner_version>>-<<parameters.runner_target>>.tar.bz2"
          mkdir -p /tmp/xur/
          curl -o "/tmp/xur.tar.bz2" -L "$url"
          pushd /tmp/xur/
          bzip2 -d ../xur.tar.bz2
          tar xvf ../xur.tar
          popd
          if [[ "<<parameters.runner_target>>" = "StandaloneOSX" ]]; then
            xur_path=/tmp/xur/StandaloneOSX.app/Contents/MacOS/unity-xunit
          else
            xur_path=/tmp/xur/<<parameters.runner_target>>
          fi
          excluded_classes=(
            "Libplanet.Tests.Net.Protocols.ProtocolTest"
            "Libplanet.Tests.Net.SwarmTest"
            "Libplanet.Tests.Net.Transports.NetMQTransportTest"
          )
          args=(
            "--hang-seconds=60"
            "--parallel=1"
            "--report-xml-path=$PWD/.xur.xml"
          )
          if [[ "$CIRCLE_NODE_TOTAL" != "" ]]; then
            args+=(
              "--distributed=$CIRCLE_NODE_INDEX/$CIRCLE_NODE_TOTAL"
              "--distributed-seed=$CIRCLE_BUILD_NUM"
            )
          fi
          for c in "${exluced_classes[@]}"; do
            args+=("--exclude-class=$c")
          done
          for project in *.Tests; do
            args+=("$PWD/$project/bin/Release/net47/$project.dll")
          done
          "$xur_path" "${args[@]}"
        no_output_timeout: 65s
    - run:
        shell: bash
        command: |
          set -evx
          mkdir -p _junit
          xsltproc -o _junit/xur.xml .circleci/xunit-junit.xslt .xur.xml
          cat _junit/xur.xml
        when: always
    - store_test_results:
        path: _junit

jobs:
  linux-netcore-build:
    docker:
    - image: mcr.microsoft.com/dotnet/sdk:3.1
    resource_class: xlarge
    steps: [netcore_build_base]

  linux-mono-build:
    docker:
    - image: mono:6.12
    resource_class: xlarge
    steps: [mono_build_base]

  linux-netcore-test:
    docker:
    - image: mcr.microsoft.com/dotnet/sdk:3.1
    resource_class: large
    parallelism: 4
    steps: [netcore_test_base]

  macos-netcore-test:
    macos:
      xcode: 11.3.0
    parallelism: 8
    steps:
    - brew_cask_install:
        package: isen-ng/dotnet-sdk-versions/dotnet-sdk3-1-400
    - netcore_test_base

  windows-netcore-test:
    executor:
      name: win/default
      size: large
    parallelism: 4
    steps: [netcore_test_base]

  linux-unity-test:
    docker:
    - image: mono:6.12
    resource_class: large
    parallelism: 4
    steps:
    - run: apt update -y && apt install -y xsltproc
    - unity_test_base

  macos-unity-test:
    macos:
      xcode: 11.3.0
    parallelism: 4
    steps:
    - unity_test_base:
        runner_target: StandaloneOSX

  windows-unity-test:
    executor:
      name: win/default
      size: large
    parallelism: 4
    steps:
    - run: choco install bzip2 xsltproc
    - unity_test_base:
        runner_target: StandaloneWindows64

workflows:
  main:
    jobs:
    - linux-netcore-build
    - linux-mono-build
    - linux-netcore-test:
        requires: [linux-netcore-build]
    - macos-netcore-test:
        requires: [linux-netcore-build]
    - windows-netcore-test:
        requires: [linux-netcore-build]
    - linux-unity-test:
        requires: [linux-mono-build]
    - macos-unity-test:
        requires: [linux-mono-build]
    - windows-unity-test:
        requires: [linux-mono-build]
